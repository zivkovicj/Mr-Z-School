c
@student_2.objective_students.find_by(:objective => @objective_80)
@student_2.has_not_scored_100(@objective_80)
c
@student_1.check_if_ready(@main_objective)
@main_objective
exit
@main_objective
x
stud.check_if_ready(x)
c
@new_quiz.ripostes.count
@new_quiz.ripostes
@new_quiz
c
puts page.body
exit
c
sem.shouldShowConsultLink
sem
exit
s
c
user.authenticate(params[:session][:password])
user.authenticate(params[:session][:password]
params[:session][:password]
user
c
exit
c
self.seminar
self.user
self
self.student
c
@seminar
@semianr
@student_2
c
exit
c
@ss
c
@ss
c
@student_2
c
self
c
self
c
@added_stars
@these_stars
c
@old_stars
@these_stars
@new_total
c
@student.errors
@student.valid?
c
self
c
self
this_student = Student.find_by(:last_name => "with Too-Long Username")
self.save
self.valid?
exit
@student.save
@student.user_number = 0
@student.user_number
c
self.save
self.valid?
self
exit
@student.errors
@student.valid?
@student
exit
self
c
Student.find_by(:username => params[:student][:username]) != @student
Student.find_by(:username => params[:student][:username])
params
c
params
c
@student.id
make_username
@student.username
c
exit
params[:student][:username] = 0
params[:student][:username]
params[:student]{:username]
@student.errors
@student.update_attributes(student_params)
c
params
c
@student.user_number
make_username
c
@student.errors
@student.valid?
@student
c
@student
c
params
@student
c
@student
c
current_user
c
quit
c
puts page.body
exit
puts page.body
c
puts page.body
c
exit
puts page.body
exit
Quiz.last
@new_quiz
puts page.body
c
exit
@teacher.errors
@teacher.valid?
@teacher.update_attributes(teacher_params).valid?
@teacher.update_attributes(teacher_params)
@teacher
params
exit
current_user
exit
current_user
c
Seminar.first
@seminar == Seminar.first
@seminar
c
current_user
c
current_user.current_class
current_user
c
current_user.current_class
@teacher_1
current_user
c
current_user
@teacher_1
exit
@teacher_1
c
exi
Teacher.last
@student_1
@teacher_1
c
@teacher_1
c
@teacher_1
c
@teacher_1
exit
@teacher_1
current_user
current_user == @teacher_1
current_user.current_class
c
current_user.current_class
c
current_user.current_class
c
current_user.current_class
current_user
c
current_user
current_user.current_class
c
current_user.current_class
current_user
exit
@rankAssignsByNeed
c
@seminar.objectives.include?(objective)
@seminar
objective
@scoreHash[objective.id]
c
@scoreHash[objective.id]
c
@scoreHash[objective.id]
objective
@teach_options.count
@teach_options
c
self.quizzes.where(:objective => obj).count
self.quizzes.where(:objective => obj).count < 2
c
self.quizzes.count
self.quizzes
self
c
puts page.body
c
exit
puts page.body
c
lo = @user_l.label_objectives.find_by(:objective => Objective.last)
Objective.last
puts page.body
@user_l
c
class_type
c
class_type
class_typecexit
exit
c
this_object.preassigns.count
this_object.preassigns
this_object
exit
Objective.where(:extent => "public").count
Objective.where(:extent => "public")
Objective.count
c
@pre_req_list
c
puts page.body
c
puts page.body
@seminar.objectives
@seminar
@bad_objective
c
@bad_objective.valid?
c
@new_quiz.ripostes.count
puts page.body
c
puts page.body
c
@riposte.question
puts page.body
c
puts page.body
