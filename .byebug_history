exit
Student.select{|x| x.goal_students.count == 0}.count
Student.select{|x| x.goal_students.count == 0}
stud.goal_students.count
stud.goal_students
exit
stud.goal_students
stud
c
@gs.checkpoints[0]
@gs.checkpoints[1]
c
C
c
this_gs.checkpoints.first
this_gs = GoalStudent.find(params[:id])
c
params.each do |x| puts x end
params.each
params.first
params[0]
params
c
puts page.body
c
@gs
c
@gs.goal
@gs.goal_id
@gs
c
@gs.save
@gs.goal_id
@gs
exit
@gs.goal_id
@gs
c
@gs
@gs.save
@gs.goal = Goal.find(@gs.goal_id)
c
@gs.goal_id
@gs.goal
params[:goal_student]
params
@gs
c
params.require(:goal_student).permit(:goal_id)
params.require(:goal_student).permit(:goal)
params.require(:goal_student)
c
params[:goal_student][:goal]
@gs
exit
Goal.find(@gs.goal_id)
@gs.goal_id
@gs.goal
@gs
c
@gs
@gs.update(:goal_id => params[:goal_student][:goal])
@gs.update(:goal => params[:goal_student][:goal])
@gs.update(:goal => params[:goal_student][:goal]
@gs
params
c
params
@gs
c
params
c
puts page.body
exit
puts page.body
c
puts page.body
c
puts page.body
c
index
c
puts page.body
c
exit
@seminar.goal_students.count
@seminar
@goal_students.count
c
@seminar.goal_students.where(:user => @student).count
exit
@seminar.goal_students.where(:student => @student).count
GoalStudent.first.user
GoalStudent.where.not(:user => nil).count
GoalStudent.first
@seminar.goal_students.where(:user => @student).count
@seminar.goal_students.where(:user => @student)
@student
@seminar.goal_students.count
@goal_students
@goal_students.count
c
@goal_students.count
@goal_students
exit
@seminar.goal_students
@goal_students.count
@goal_students
c
gs = student.goal_students.new
exit
gs = student.goal_students.new
exit
gs.seminar = seminar
seminar
gs.seminar
gs
gs1
exit
gs1 = student.goal_students.new
student
exit
GoalStudent.first
GoalStudent.count
exit
obj.priority_in(@seminar)
@seminar.rank_objectives_by_need.count
@student_1.teach_options(@seminar, @seminar.rank_objectives_by_need).count
@student_1.teach_options.count
@student_1.teach_options(@seminar, @seminar.rank_objectives_by_need).include?(obj)
@student_1.score_on(obj)
obj = @seminar.objectives.select{|x| !@student_1.teach_options(@seminar, @seminar.rank_objectives_by_need).include?(x)}.first
@seminar.objectives.select{|x| !@student_1.teach_options(@seminar, @seminar.rank_objectives_by_need).include?(x)}
exit
current_user
c
exit
@objective.preassigns.count
@objective.preassigns
@objective
c
Precondition.count
Preassign.count
params
c
params
aam
aa
c
params
