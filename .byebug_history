c
params[:seminar_student][:req_id]
params[:seminar_student][:req_type]
c
params
c
@scores
c
@scores
exit
@seminar.obj_studs_for_seminar
@scores
c
@students
c
pre_objectives.count
@show_all
c
@show_all
c
params
exit
@show_all
c
exit
c
new_score_this_term
exit
c
exit
c
exit
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
c
new_score_this_term
exit
new_score_this_term
c
new_score_this_term
c
self
new_score_this_term
c
exit
@seminar.rank_objectives_by_need[0]
@student_1.teach_options(@seminar, @seminar.rank_objectives_by_need)[0]
@seminar.reload
@seminar.rank_objectives_by_need[0]
@objective_10
c
@seminar.objective_seminars.where(:priority => 5).count
exit
objective_students.where(:objective => assign_list).where("points_all_time >= ?", seminar.consultantThreshold).count
objective_students.where(:objective => assign_list)
objective_students.where(:objective => assign_list).count
objective_students.count
objective_students
exit
seminar.objectives
exit
@scores[stud_id].values.inject{|a,b| a.to_i + b.to_i}
@scores[stud_id].values
@scores[stud_id]
stars_this_term
c
@student_5.objective_students.each do |os| puts os.points_all_time end
c
@student_5.score_on(obj)
obj = Team.select{|x|x.users.include?(@student_5)}.first.objective
obj = Team.select{|x|x.users.include?(@student_5)}.objective
Team.select{|x|x.users.include?(@student_5)}
prof_list_still_needed
exit
@student_5.score_on(obj)
obj = Team.select{|x|x.users.include?(@student_5)}.first.objective
Team.select{|x|x.users.include?(@student_5)}.first.objective
Team.select{|x|x.users.include?(@student_5)}
Team.select{|x|x.users.include?(@student_5}
Team.select{|x|x.users.include?(@student_5_}
@consultancy.users.include?(@student_5)
prof_list_still_needed
c
@consultancy.users.include?(@student_4)
@consultancy.students.include?(@student_4)
need_placement(@student_4)
@seminar.students.include?(@student_4)
consult_list_still_needed.include?(@student_4)
temp_consult_list.include?(@student_4)
hp_consult_list.include?(@student_4)
hp_consult_list[2]
hp_consult_list[1]
hp_consult_list[0]
hp_consult_list
still_needed(obj)
obj
c
hp_consult_list.include?(@student_4)
temp_consult_list.include?(@student_4)
@objective_40
obj
c
obj
@student_4.score_on(@objective_40)
@student_4.score_on(@objective_50)
@objective_50
@objective_40
obj
consult_list_still_needed.include?(@student_4)
temp_consult_list.include?(@student_4)
c
@student_4
c
@rank_by_consulting.include?(@student_4)
exit
new_score_this_term
c
exit
points_this_term
new_score_this_term
self
c
[points_this_term.to_i, this_score].max
this_score
points_this_term
c
this_score
points_this_term
c
this_score
total_score
points_this_term
c
this_score
points_this_term
c
points_this_term
c
this_score
points_this_term
c
this_score
points_this_term
exit
@scores[stud_id]
@scores
exit
@scores[stud_id].first[1]
@scores[stud_id].first
@scores[stud_id][0]
@scores[stud_id]
stud_id
@scores
c
@scores[stud_id].values
c
@scores[stud_id].values
c
