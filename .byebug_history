exit
SeminarTeacher.where(:user => @teacher_1, :seminar => @seminar)
these_sems.include?(@seminar)
@seminar
c
exit
@seminar_1
sem_teach_1
@seminar_1
these_sems.count
these_sems
exit
@seminar_2.students
@seminar_2
@seminar
exit
test_student
exit
test_obj_stud
test_student.first_name
test.student.first_name
test_student
c
test_obj
test_student
test_obj_stud
c
params
c
params[:seminar][:term]
params[:term]
params
c
puts page.body
c
exit
params[:reset]
params
exit
params[:reset]
params
c
lab_obj_u
c
puts page.body
exit
puts page.body
c
first_class_to_add.objectives[2]
preassign_to_add_to_seminar
first_class_to_add.objectives[2] == preassign_to_add_to_seminar
first_class_to_add.objectives[2]
first_class_to_add.objectives[1]
first_class_to_add.objectives[0]
first_class_to_add.objectives.include?(preassign_to_add_to_seminar)
first_class_to_add.objectives
first_class_to_add
preassign_to_add_to_seminar
c
sem.objectives
sem = @objective.seminars.first
sem = @objective.seminars.count
sem = @objective.seminar.count
@objective.seminars.count
@objective.seminars
@obejective.seminars
c
first_class_to_add
exit
c
first_class_to_add.objectives
preassign_to_add_to_seminar
c
preassign_to_add_to_seminar
c
sem.objectives
sem.objectives.count
sem = @objective.seminars.first
@objective.seminars.first
@objective.seminars.count
c
objective.preassigns.second
pre_1
seminar.objectives
seminar
pre_1 = objective.preassigns.first
exit
sem.reload.objectives.include?(pre_1)
sem.objectives.include?(pre_1)
pre_1 = @objective.preassigns.first
sem = @objective.seminars.first
@objective.reload.seminars.count
@objective.reload
@objective.seminars.count
exit
seminar.reload.objectives
seminar.objectives.count
seminar.objectives
seminar.objective_seminars.find_or_create_by(:objective_id => pre_1.id)
pre_1 = objective.preassigns.first
pre_1
seminar.objective_seminars.find_or_create_by(:objective_id => pre_1.id)
seminar.objectives
c
objective
seminar.objectives
seminar
pre_1 = objective.preassigns.second
pre_1 = objective.preassigns.first
exit
objective.preassigns
objective.name
exit
@objective.objective_seminars.count
@objective.objective_seminars
exit
@old_seminars
@objective.seminar_ids
c
exit
puts page.body
c
puts page.body
exit
params
exit
puts page.body
c
puts page.body
exit
puts page.body
exit
@seminar.students.first
@os_1.objective
obj_stud_0_0
c
puts page.body
c
puts page.body
c
puts page.body
exit
@seminar.school
@seminar
@school
c
@school
c
@schoool
c
@school
c
params
c
puts page.body
exit
puts page.body
c
os.objective
os
@seminar.objective_seminars.count
exit
puts page.body
c
params
c
exit
@seminar.objective_seminars
@seminar
params
c
@os_0.objective
@os_0
exit
@os_0
exit
params
c
exit
esit
submenu[0]
submenu
group
exit
SeminarStudent.find_by(:seminar => @seminar, :user => stud)
ObjectiveStudent.find_by(:objective => obj, :user => stud)
ObjectiveSeminar.find_by(:objective => obj, :seminar => @seminar)
obj = team.objective
stud = team.consultant
@objective_50
@objective_40
team.objective
team.consultant
team.consultant.score_on(team.objective)
c
team.consultant.score_on(team.objective)
c
team.consultant.score_on(team.objective)
c
team.consultant.score_on(team.objective)
c
team.consultant.score_on(team.objective)
c
team.consultant.score_on(team.objective)
c
team.consultant.score_on(team.objective)
c
team.consultant.score_on(team.objective)
@seminar.consultantThreshold
team.consultant
exit
rbc_0_ss.reload
rbc_0_ss
requested_objective
c
@school
c
exit
@teacher
@teacher.school
@school
c
obj_stud
obj_stud.update_keys("dc", 2)
obj_stud.dc_keys
obj_stud.points_this_term
obj_stud.objective
obj_stud.objectuve
obj_stud.user
exit
this_obj_stud.user
this_obj_stud.reload
this_obj_stud.objective
this_obj_stud.obj
this_obj_stud
exit
@consultancy.all_consultants.each do |consult| puts consult.first_name end
@consultancy.teams.count
@consultancy.all_consultants.count
@consultancy.all_consultants
exit
@seminar.seminar_students.order(:last_consultant_day).map(:user)
@seminar.seminar_students.order(:last_consultant_day)
c
self
self.update(:last_consultant_day => new_date)
self
date_of_consultancy - self.pref_request.to_i.days
self.pref_request.to_i
self.pref_request
date_of_consultancy
exit
c
@scores
exit
@seminar.obj_studs_for_seminar.count
